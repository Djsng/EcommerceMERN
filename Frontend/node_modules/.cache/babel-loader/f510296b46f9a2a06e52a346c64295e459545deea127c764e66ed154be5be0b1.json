{"ast":null,"code":"var _jsxFileName = \"/Users/devjyoti/Desktop/EcommerceMERN/Frontend/src/components/ForgotPassword.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './styles/ForgotPassword.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ForgotPassword = () => {\n  _s();\n  const [email, setEmail] = useState('');\n  const [resetCode, setResetCode] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [generatedCode, setGeneratedCode] = useState(null);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n  const [isCodeSent, setIsCodeSent] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n\n  // Generates a 4-digit reset code\n  const generateResetCode = () => {\n    const code = Math.floor(1000 + Math.random() * 9000);\n    return code.toString();\n  };\n  const handleSendResetCode = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setErrorMessage('');\n    setSuccessMessage('');\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/forgot-password`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n      const data = await response.json();\n      setLoading(false);\n      if (response.ok) {\n        const code = generateResetCode(); // Generate code on the frontend\n        setGeneratedCode(code); // Save the generated code\n        setIsCodeSent(true); // Indicate that code has been sent\n        alert(`Your reset code is: ${code}`); // Show the reset code to the user\n        setSuccessMessage('Check your email for the reset code'); // This could also be handled by email if desired\n      } else {\n        setErrorMessage(data.message || 'Error sending reset code');\n      }\n    } catch (error) {\n      setLoading(false);\n      setErrorMessage('Error while sending reset code. Please try again.');\n    }\n  };\n  const handleSubmitCodeAndPassword = async e => {\n    e.preventDefault();\n\n    // Check if the entered reset code matches the generated code\n    if (resetCode !== generatedCode) {\n      setErrorMessage('Incorrect reset code. Please try again.');\n      return;\n    }\n    if (!newPassword) {\n      setErrorMessage('New password is required');\n      return;\n    }\n\n    // Proceed with password reset\n    setLoading(true);\n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/reset-password`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          resetCode,\n          newPassword\n        })\n      });\n      const data = await response.json();\n      setLoading(false);\n      if (response.ok) {\n        setSuccessMessage(data.message);\n        setErrorMessage('');\n        setTimeout(() => {\n          navigate('/signin'); // Redirect to sign-in page after password reset\n        }, 2000);\n      } else {\n        setErrorMessage(data.message || 'Error resetting password');\n      }\n    } catch (error) {\n      setLoading(false);\n      setErrorMessage('Error while resetting password. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"forgot-password-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Forgot Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), !isCodeSent ? /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSendResetCode,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"formGroup\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          className: \"input\",\n          value: email,\n          onChange: e => setEmail(e.target.value),\n          placeholder: \"Enter your email\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"submitButton\",\n        disabled: loading,\n        children: loading ? 'Sending code...' : 'Send Reset Code'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmitCodeAndPassword,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"formGroup\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"input\",\n          value: resetCode,\n          onChange: e => setResetCode(e.target.value),\n          placeholder: \"Enter reset code\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"formGroup\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          className: \"input\",\n          value: newPassword,\n          onChange: e => setNewPassword(e.target.value),\n          placeholder: \"Enter new password\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"submitButton\",\n        disabled: loading,\n        children: loading ? 'Resetting password...' : 'Reset Password'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"errorMessage\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 30\n    }, this), successMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"successMessage\",\n      children: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 32\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n};\n_s(ForgotPassword, \"V0HClEU9M2XYO/BUsQ0uwnmlyJk=\", false, function () {\n  return [useNavigate];\n});\n_c = ForgotPassword;\nexport default ForgotPassword;\nvar _c;\n$RefreshReg$(_c, \"ForgotPassword\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","ForgotPassword","_s","email","setEmail","resetCode","setResetCode","newPassword","setNewPassword","generatedCode","setGeneratedCode","errorMessage","setErrorMessage","successMessage","setSuccessMessage","isCodeSent","setIsCodeSent","loading","setLoading","navigate","generateResetCode","code","Math","floor","random","toString","handleSendResetCode","e","preventDefault","response","fetch","process","env","REACT_APP_API_URL","method","headers","body","JSON","stringify","data","json","ok","alert","message","error","handleSubmitCodeAndPassword","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","required","disabled","_c","$RefreshReg$"],"sources":["/Users/devjyoti/Desktop/EcommerceMERN/Frontend/src/components/ForgotPassword.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './styles/ForgotPassword.css';\r\n\r\nconst ForgotPassword = () => {\r\n    const [email, setEmail] = useState('');\r\n    const [resetCode, setResetCode] = useState('');\r\n    const [newPassword, setNewPassword] = useState('');\r\n    const [generatedCode, setGeneratedCode] = useState(null);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [successMessage, setSuccessMessage] = useState('');\r\n    const [isCodeSent, setIsCodeSent] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    // Generates a 4-digit reset code\r\n    const generateResetCode = () => {\r\n        const code = Math.floor(1000 + Math.random() * 9000);\r\n        return code.toString();\r\n    };\r\n\r\n    const handleSendResetCode = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        setErrorMessage('');\r\n        setSuccessMessage('');\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/forgot-password`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ email })\r\n            });\r\n\r\n            const data = await response.json();\r\n            setLoading(false);\r\n\r\n            if (response.ok) {\r\n                const code = generateResetCode();  // Generate code on the frontend\r\n                setGeneratedCode(code);  // Save the generated code\r\n                setIsCodeSent(true);  // Indicate that code has been sent\r\n                alert(`Your reset code is: ${code}`);  // Show the reset code to the user\r\n                setSuccessMessage('Check your email for the reset code'); // This could also be handled by email if desired\r\n            } else {\r\n                setErrorMessage(data.message || 'Error sending reset code');\r\n            }\r\n        } catch (error) {\r\n            setLoading(false);\r\n            setErrorMessage('Error while sending reset code. Please try again.');\r\n        }\r\n    };\r\n\r\n    const handleSubmitCodeAndPassword = async (e) => {\r\n        e.preventDefault();\r\n\r\n        // Check if the entered reset code matches the generated code\r\n        if (resetCode !== generatedCode) {\r\n            setErrorMessage('Incorrect reset code. Please try again.');\r\n            return;\r\n        }\r\n\r\n        if (!newPassword) {\r\n            setErrorMessage('New password is required');\r\n            return;\r\n        }\r\n\r\n        // Proceed with password reset\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_API_URL}/reset-password`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ email, resetCode, newPassword })\r\n            });\r\n\r\n            const data = await response.json();\r\n            setLoading(false);\r\n\r\n            if (response.ok) {\r\n                setSuccessMessage(data.message);\r\n                setErrorMessage('');\r\n                setTimeout(() => {\r\n                    navigate('/signin'); // Redirect to sign-in page after password reset\r\n                }, 2000);\r\n            } else {\r\n                setErrorMessage(data.message || 'Error resetting password');\r\n            }\r\n        } catch (error) {\r\n            setLoading(false);\r\n            setErrorMessage('Error while resetting password. Please try again.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"forgot-password-container\">\r\n            <h2>Forgot Password</h2>\r\n            {!isCodeSent ? (\r\n                <form onSubmit={handleSendResetCode}>\r\n                    <div className=\"formGroup\">\r\n                        <input\r\n                            type=\"email\"\r\n                            className=\"input\"\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            placeholder=\"Enter your email\"\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <button type=\"submit\" className=\"submitButton\" disabled={loading}>\r\n                        {loading ? 'Sending code...' : 'Send Reset Code'}\r\n                    </button>\r\n                </form>\r\n            ) : (\r\n                <form onSubmit={handleSubmitCodeAndPassword}>\r\n                    <div className=\"formGroup\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"input\"\r\n                            value={resetCode}\r\n                            onChange={(e) => setResetCode(e.target.value)}\r\n                            placeholder=\"Enter reset code\"\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className=\"formGroup\">\r\n                        <input\r\n                            type=\"password\"\r\n                            className=\"input\"\r\n                            value={newPassword}\r\n                            onChange={(e) => setNewPassword(e.target.value)}\r\n                            placeholder=\"Enter new password\"\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <button type=\"submit\" className=\"submitButton\" disabled={loading}>\r\n                        {loading ? 'Resetting password...' : 'Reset Password'}\r\n                    </button>\r\n                </form>\r\n            )}\r\n\r\n            {errorMessage && <p className=\"errorMessage\">{errorMessage}</p>}\r\n            {successMessage && <p className=\"successMessage\">{successMessage}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ForgotPassword;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}